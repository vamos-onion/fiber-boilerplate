// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package models

import (
	"database/sql/driver"
	"fmt"

	null "gopkg.in/guregu/null.v4"
)

type EnumGender string

const (
	EnumGenderM EnumGender = "M"
	EnumGenderF EnumGender = "F"
)

func (e *EnumGender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EnumGender(s)
	case string:
		*e = EnumGender(s)
	default:
		return fmt.Errorf("unsupported scan type for EnumGender: %T", src)
	}
	return nil
}

type NullEnumGender struct {
	EnumGender EnumGender
	Valid      bool // Valid is true if EnumGender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEnumGender) Scan(value interface{}) error {
	if value == nil {
		ns.EnumGender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EnumGender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEnumGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EnumGender), nil
}

type AppuserBlock struct {
	ID         null.Int    `db:"id"`
	UUID       null.String `db:"uuid"`
	CreatedAt  null.Time   `db:"created_at"`
	ModifiedAt null.Time   `db:"modified_at"`
	Name       null.String `db:"name"`
	Birthday   null.Time   `db:"birthday"`
	Gender     null.String `db:"gender"`
	Withdraw   null.Bool   `db:"withdraw"`
}

type ArrayTestBlock struct {
	ID                null.Int      `db:"id"`
	UUID              null.String   `db:"uuid"`
	CreatedAt         null.Time     `db:"created_at"`
	ModifiedAt        null.Time     `db:"modified_at"`
	VarcharArrayField []null.String `db:"varchar_array_field"`
	TextArrayField    []null.String `db:"text_array_field"`
	IntArrayField     []int32       `db:"int_array_field"`
	FloatArrayField   []float64     `db:"float_array_field"`
	BoolArrayField    []null.Bool   `db:"bool_array_field"`
}
