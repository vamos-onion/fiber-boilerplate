// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYW2/URhv+K9Z8XBDJy3qTkC/Zuy0QmpaIlIB6sdpKE/vd3aG2x4zHwCqshMiiIqAH",
	"qaSFNotyAVRIkQoipalE/xC2/0M1Y6+9G8+SA8lNexfPznvw87yHx1lFJnU86oLLfVRdRR5m2AEOLH1q",
	"ERdzQt0vAmCdJfGjODepy8Hl4k/seTYx5Z3yVZ+64sw32+Bg6YBRDxgnIN3ZxCHSyIImDmyOqhVDRxb4",
	"JiOe8ICqKP7ucdTfjn67rYUP/tKitxvh5nMtuvcY6cjBN4kTOMLK0JFD3PRJR7zjAaoi4nJoAUNdXWQO",
	"o5HGBkIf9tXNjujKVTA56oojta91LX74MOy/C3/fiXuvkI6I+PWawA7pyMWOcJODKhL1KePEbR0JvhZJ",
	"aBtNzueMuK16Q6TDwVHciDbXw80tLXz1Mv7p+cna8hntlnb23PKZCZS9e+IE5WBgxnBHPH8NnY8JGt95",
	"tneU/XAw8Lc3ASnk0m0CpUyv5nmBD0yCbtsXm6haX0UnGDRRFf2vnLdJObUpn3M54Z1L4HvU9QF19Q9f",
	"T/0vuE2Kuo2ujoYPClyuEMbbFu4ogFvrh3d70a+Pov47pKMmZQ7mqIoszAGJyuccmLj4Vd0ozTVWp7ul",
	"k0a9Uppr3KrUjdJkYyJ7rlcmG/LSram6UWlMnFBR0QLXSmDZlUfvdfimp7JIcC7c72+HL5T3bxDethi+",
	"UbSJ1+7F32xr0c9b4dvbuekKpTZgVzLI4FpAGFioWk8C6zl2WfJDMRqFWsqYuEB8PmDjICUg7EbKYJRK",
	"nHhX9ED85HH09ActfLEV3X8W398Z7pZ9lNJ+GkUU2hkGmENqdAmuBeDzI6y4g1cMuGLY1tEi0tH8ECOH",
	"LaH9loGKewWFBWg45dhWpLPd16L1XtTfju9upEtq7/UxCDk+XMKXVeNKKqLeay16sPH+Ve9kvHY7etoT",
	"tbO2FT/qTQyTQ1w+M41Uu3GRWqRJxvj/Y+P9n+/Eu0Sb6x8X5sqVhbPFAPJ0LwLlJRVZ58EFRszx0JnU",
	"UtTNp5cvL2nLHPPA16K/H4U/bigztjCXWxW7nbT3d9flaqG9dHSz1KKlIWesiU1Y7QqHDvh+JkSGExr8",
	"sBcQ8nVyPypIlqjbKuLgkeQUbmLHs6XsEPf2iifNilHEogQzYIR3lsUISmJcvcFrAW/L2QGYAZsfFMVn",
	"X15Gu/dzciYnmBzh0iJPqM25l6x1kk5gTrhMfFGIM2xrIjettrSg+cCuS9PrwPzEeeWUccoQaFAPXOwR",
	"VEVT8kjuw7ZMt5zO4bIp20uiRH1FDwwwk96YlF4LFqqOjlGUAAc+/4RanQOJtg9NduWo7o7SxFkA8iBp",
	"Avlyk4ZxZDlk26Uosi5+LkCersweWbDdHa0IOo+JPVKDsjWz6qs3RBdy3PJFBacko4YwyCi3SUJ0Cw7A",
	"t9gJtcHu1kc+jeqFuXlnK/rlpVjmQUAsseKyxqtMzp2egdPTpdPGlFWanmlWSrMrcyul/5vNKWO6uYJn",
	"jMoYpZr6ypEsdO/4PLJdmWcSP/n2/c5O+P2TMeHSvXm4cNluz8ItamVtfkyoTJcdKthuWZjHFL2hlbUm",
	"tn0YEzpTgorgQ8JSXbZ5EZSLX277MFJ+UYv6Pe5uzrTtv6irA88aDPJApWXy4txcD99sp6qm0OdXpJvj",
	"nesjM/U/PMprCxcOSfpA0ShHuNQGqcIZJfc88CUiz48NZKnAFC8r8tFYjkb+ZonM6iZACDGjWikXqIlt",
	"7SxcB5t6jshSRwGzU61ULZdtcaFNfV6dNWaNspA9Q/DtdpeiMPgn1EDPjl7KmyC9N+Cg2+j+EwAA//8/",
	"eLwFKxQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
