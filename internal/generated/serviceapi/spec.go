// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
