// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"encoding/json"
	"fmt"
	"net/url"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /appuser/create)
	CreateAppuser(c *fiber.Ctx) error

	// (GET /appuser/list)
	ListAppusers(c *fiber.Ctx, params ListAppusersParams) error

	// (PUT /appuser/update)
	UpdateAppuser(c *fiber.Ctx) error

	// (GET /ping)
	GetPing(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// CreateAppuser operation middleware
func (siw *ServerInterfaceWrapper) CreateAppuser(c *fiber.Ctx) error {

	c.Context().SetUserValue(JwtAuthScopes, []string{})

	return siw.Handler.CreateAppuser(c)
}

// ListAppusers operation middleware
func (siw *ServerInterfaceWrapper) ListAppusers(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(JwtAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAppusersParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "uuid" -------------

	err = runtime.BindQueryParameter("form", true, false, "uuid", query, &params.Uuid)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter uuid: %w", err).Error())
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", query, &params.Name)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter name: %w", err).Error())
	}

	// ------------- Optional query parameter "gender" -------------

	err = runtime.BindQueryParameter("form", true, false, "gender", query, &params.Gender)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter gender: %w", err).Error())
	}

	// ------------- Optional query parameter "withdraw" -------------

	err = runtime.BindQueryParameter("form", true, false, "withdraw", query, &params.Withdraw)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter withdraw: %w", err).Error())
	}

	// ------------- Optional query parameter "sorting" -------------

	if paramValue := c.Query("sorting"); paramValue != "" {

		var value SortingQueryParam
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Error unmarshaling parameter 'sorting' as JSON: %w", err).Error())
		}

		params.Sorting = &value

	}

	// ------------- Optional query parameter "pagination" -------------

	if paramValue := c.Query("pagination"); paramValue != "" {

		var value PaginationQueryParam
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Error unmarshaling parameter 'pagination' as JSON: %w", err).Error())
		}

		params.Pagination = &value

	}

	return siw.Handler.ListAppusers(c, params)
}

// UpdateAppuser operation middleware
func (siw *ServerInterfaceWrapper) UpdateAppuser(c *fiber.Ctx) error {

	c.Context().SetUserValue(JwtAuthScopes, []string{})

	return siw.Handler.UpdateAppuser(c)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c *fiber.Ctx) error {

	return siw.Handler.GetPing(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Post(options.BaseURL+"/appuser/create", wrapper.CreateAppuser)

	router.Get(options.BaseURL+"/appuser/list", wrapper.ListAppusers)

	router.Put(options.BaseURL+"/appuser/update", wrapper.UpdateAppuser)

	router.Get(options.BaseURL+"/ping", wrapper.GetPing)

}
